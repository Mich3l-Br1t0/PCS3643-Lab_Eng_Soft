# Generated by Django 4.1.1 on 2022-11-15 16:58

from django.db import migrations, models
from django.contrib.contenttypes.models import ContentType
from django.contrib.auth.models import User, Group, Permission
from ..models import Flight, Airline, Airport, User_data


def create_groups(apps, schema_migration):
    flight_ct = ContentType.objects.get_for_model(model=Flight)
    airline_ct = ContentType.objects.get_for_model(model=Airline)
    airport_ct = ContentType.objects.get_for_model(model=Airport)

    monitor_flights = Permission.objects.create(
        name="Monitor flights", codename="monitor_flights", content_type=flight_ct
    )
    crud_airport = Permission.objects.create(
        name="CRUD Airport", codename="crud_airport", content_type=airport_ct
    )
    crud_airline = Permission.objects.create(
        name="CRUD Airline", codename="crud_airline", content_type=airline_ct
    )
    crud_flight = Permission.objects.create(
        name="CRUD Flight", codename="crud_flight", content_type=flight_ct
    )
    manage_reports = Permission.objects.create(
        name="Manage Reports", codename="manage_reports", content_type=None
    )

    status_registered_to_boarding_or_cancelled = Permission.objects.create(
        name="Change status from registered to boarding or cancelled",
        codename="status_registered_to_boarding_or_cancelled",
        content_type=flight_ct,
    )
    status_boarding_to_scheduled = Permission.objects.create(
        name="Change status from boarding to scheduled",
        codename="status_boarding_to_scheduled",
        content_type=flight_ct,
    )
    status_scheduled_to_taxiing = Permission.objects.create(
        name="Change status from scheduled to taxiing",
        codename="status_scheduled_to_taxiing",
        content_type=flight_ct,
    )
    status_taxiing_to_ready = Permission.objects.create(
        name="Change status from taxiing to ready",
        codename="status_taxiing_to_ready",
        content_type=flight_ct,
    )
    status_ready_to_authorized = Permission.objects.create(
        name="Change status from ready to authorized",
        codename="status_ready_to_authorized",
        content_type=flight_ct,
    )
    status_authorized_to_flying = Permission.objects.create(
        name="Change status from authorized to flying",
        codename="status_authorized_to_flying",
        content_type=flight_ct,
    )
    status_flying_to_landed = Permission.objects.create(
        name="Change status from flying to landed",
        codename="status_flying_to_landed",
        content_type=flight_ct,
    )

    pilot_permissions = [
        monitor_flights,
        status_scheduled_to_taxiing,
        status_taxiing_to_ready,
        status_flying_to_landed,
    ]

    manager_permissions = [manage_reports]

    control_permissions = [
        monitor_flights,
        status_ready_to_authorized,
        status_authorized_to_flying,
    ]

    worker_permissions = [
        monitor_flights,
        status_registered_to_boarding_or_cancelled,
        status_boarding_to_scheduled,
    ]

    operator_permissions = [
        crud_airline,
        crud_airport,
        crud_flight,
    ]

    pilot = Group(name="pilot")
    pilot.save()
    pilot.permissions.set(pilot_permissions)

    manager = Group(name="manager")
    manager.save()
    manager.permissions.set(manager_permissions)

    control = Group(name="control")
    control.save()
    control.permissions.set(control_permissions)

    worker = Group(name="worker")
    worker.save()
    worker.permissions.set(worker_permissions)

    operator = Group(name="operator")
    operator.save()
    operator.permissions.set(operator_permissions)

    for user in User_data.objects.all():
        if user.profession.lower() == "pilot":
            pilot.user_set.add(user)
        elif user.profession.lower() == "control":
            control.user_set.add(user)
        elif user.profession.lower() == "manager":
            manager.user_set.add(user)
        elif user.profession.lower() == "worker":
            worker.user_set.add(user)
        else:
            operator.user_set.add(user)


class Migration(migrations.Migration):

    dependencies = [
        ("Main", "0002_airline_unique flight identifier"),
    ]

    operations = [
        migrations.RunPython(create_groups),
    ]
